// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/alanyeung95/delivery-order-api/pkg/orders (interfaces: Service)

// Package mock_orders is a generated GoMock package.
package mock_orders

import (
	context "context"
	orders "github.com/alanyeung95/delivery-order-api/pkg/orders"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockService is a mock of Service interface
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// GetDistance mocks base method
func (m *MockService) GetDistance(arg0 context.Context, arg1 orders.PlaceOrderRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDistance", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDistance indicates an expected call of GetDistance
func (mr *MockServiceMockRecorder) GetDistance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDistance", reflect.TypeOf((*MockService)(nil).GetDistance), arg0, arg1)
}

// GetOrderById mocks base method
func (m *MockService) GetOrderById(arg0 context.Context, arg1 string) (*orders.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderById", arg0, arg1)
	ret0, _ := ret[0].(*orders.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderById indicates an expected call of GetOrderById
func (mr *MockServiceMockRecorder) GetOrderById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderById", reflect.TypeOf((*MockService)(nil).GetOrderById), arg0, arg1)
}

// ListOrder mocks base method
func (m *MockService) ListOrder(arg0 context.Context, arg1, arg2 int) ([]orders.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOrder", arg0, arg1, arg2)
	ret0, _ := ret[0].([]orders.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOrder indicates an expected call of ListOrder
func (mr *MockServiceMockRecorder) ListOrder(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOrder", reflect.TypeOf((*MockService)(nil).ListOrder), arg0, arg1, arg2)
}

// PlaceOrder mocks base method
func (m *MockService) PlaceOrder(arg0 context.Context, arg1 int) (*orders.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlaceOrder", arg0, arg1)
	ret0, _ := ret[0].(*orders.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PlaceOrder indicates an expected call of PlaceOrder
func (mr *MockServiceMockRecorder) PlaceOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlaceOrder", reflect.TypeOf((*MockService)(nil).PlaceOrder), arg0, arg1)
}

// TakeOrder mocks base method
func (m *MockService) TakeOrder(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TakeOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// TakeOrder indicates an expected call of TakeOrder
func (mr *MockServiceMockRecorder) TakeOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TakeOrder", reflect.TypeOf((*MockService)(nil).TakeOrder), arg0, arg1)
}
